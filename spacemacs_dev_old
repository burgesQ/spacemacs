;; -*- mode: emacs-lisp; lexical-binding: t -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Layer configuration:
This function should only modify configuration layer settings."
  (setq-default

   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '()

   ;; List of configuration layers to load.
   dotspacemacs-configuration-layers
   '(
     ;; ----------------------------------------------------------------
     ;; Example of useful layers you may want to use right away.
     ;; Uncomment some layer names and press `SPC f e R' (Vim style) or
     ;; `M-m f e R' (Emacs style) to install them.
     ;; ----------------------------------------------------------------

     ;;
     ;; work flow
     ;;

     ;; lsp handle the IDE language backend
     (lsp :variables
                                        ; allow in code comment
          lsp-lens-enable nil
          lsp-enable-file-watchers nil
                                        ; only show error in file
          lsp-headerline-breadcrumb-segments '(project file symbols))

     ;; global magic debuger ?
     ;; dap
     syntax-checking
     git
     version-control
     theming
     helm
     emoji
     bibtex

     (unicode-fonts :variables
                    unicode-fonts-ligature-modes '(prog-mode))

     (org :variables
          org-enable-org-journal-support t
          org-enable-github-support t
          org-enable-reveal-js-support t
          org-projectile-file "TODOs.org")

     (auto-completion :variables
                      auto-completion-tab-key-behavior 'cycle
                      auto-completion-minimum-prefix-length 1
                      auto-completion-enable-snippets-in-popup t
                      auto-completion-enable-help-tooltip t
                      auto-completion-enable-sort-by-usage t)

     (spell-checking :variables
                     ;; bug w/ emacs daemon, so ensure it's disabled
                     spell-checking-enable-auto-dictionary nil
                     spell-checking-enable-by-default nil
                     enable-flyspell-auto-completion t)

     (shell :variables
            shell-default-shell 'ansi-term
            shell-default-height 30
            shell-default-term-shell "/bin/zsh"
            shell-default-position 'bottom)

                                        ; file quick displaying
     (ranger :variables
             ranger-show-preview t
             ranger-show-hidden t
             ranger-cleanup-eagerly t
             ranger-cleanup-on-disable t
             ranger-ignored-extensions '("mkv" "flv" "iso" "mp4"))

     ;; waka
     ;; (wakatime :variables:
     ;;           enwakatime-api-key  "12cc0e7d-58ce-458f-bb54-c74e607956e3"
     ;;           wakatime-cli-path "/home/master/.local/bin/wakatime"
     ;;           )

     ;;
     ;; language
     ;;

     shell-scripts
     lua
     yaml
     nginx
     docker
     emacs-lisp
     rust
     react
     cmake
     systemd
     python
     sql
     html

     (markdown :variables
               markdown-live-preview-engine 'vmd)

     (c-c++ :variables
            ;; c-c++-enable-clang-support t
            c-c++-default-mode-for-headers 'c++-mode)

     (php :variables
          php-backend 'lsp)

     (go :variables
         ;; other value lsp or go-mode (less support since 1.11)
         go-backend 'lsp
         ;; or gocode (less support for internal doc)
         godoc-at-point-function 'godoc-gogetdoc
         go-format-before-save t
         gofmt-command "goimports"
         go-use-golangci-lint t
         go-tab-width 2)

     ;; (go :variables
     ;;     ;; other value lsp
     ;;     go-backend 'lsp
     ;;     godoc-at-point-function 'godoc-gogetdoc
     ;;     go-format-before-save t
     ;;     gofmt-command "goimports"
     ;;     go-use-golangci-lint t
     ;;     go-tab-width 2)

                                        ; pls npm install --unsafe-perm -g \
                                        ;  prettier import-js eslint
     (javascript :variables
                                        ; auto import
                 javascript-import-tool 'import-js
                                        ; add node module to local buffer
                 node-add-modules-path t
                 js2-basic-offset 2
                 js-indent-level 2
                                        ; fmt on save
                 javascript-fmt-on-save t)

                                        ; dep for markdown

     ) ;; end dotspacemacs-configuration-layers

   ;; List of additional packages that will be installed without being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages, then consider creating a layer. You can also put the
   ;; configuration in `dotspacemacs/user-config'.
   ;; To use a local version of a package, use the `:location' property:
   ;; '(your-package :location "~/path/to/your-package/")
   ;; Also include the dependencies as they will not be resolved automatically.
   dotspacemacs-additional-packages '(
                                      ;; aesthetics
                                      ;; fira-code-mode
                                      ;; flycheck-golangci-lint
                                      org-bullets
                                      olivetti)

   ;; A list of packages that will not be installed and loaded.
   dotspacemacs-excluded-packages '(
                                        ; https://github.com/syl20bnr/spacemacs/issues/13530
                                    company-tern)
   ))

(defun dotspacemacs/init ()
  "Initialization:
This function is called at the very beginning of Spacemacs startup,
before layer configuration.
It should only modify the values of Spacemacs settings."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default

   ;; One of `vim', `emacs' or `hybrid'.
   ;; `hybrid' is like `vim' except that `insert state' is replaced by the
   ;; `hybrid state' with `emacs' key bindings. The value can also be a list
   ;; with `:variables' keyword (similar to layers). Check the editing styles
   ;; section of the documentation for details on available variables.
   ;; (default 'vim)
   dotspacemacs-editing-style 'emacs

   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to an image format supported
   ;; by your Emacs build.
   ;; If the value is nil then no banner is displayed. (default 'official)
   dotspacemacs-startup-banner 'random

   ;; List of items to show in startup buffer or an association list of
   ;; the form `(list-type . list-size)`. If nil then it is disabled.
   ;; Possible values for list-type are:
   ;; `recents' `bookmarks' `projects' `agenda' `todos'.
   ;; List sizes may be nil, in which case
   ;; `spacemacs-buffer-startup-lists-length' takes effect.
   dotspacemacs-startup-lists '((todos . 10)
                                (agenda . 5)
                                (recents . 5)
                                (projects . 5))

   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press `SPC T n' to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(apropospriate-dark
                         oldlace
                         spacemacs-dark
                         spacemacs-light)

   ;; Set the theme for the Spaceline. Supported themes are `spacemacs',
   ;; `all-the-icons', `custom', `doom', `vim-powerline' and `vanilla'. The
   ;; first three are spaceline themes. `doom' is the doom-emacs mode-line.
   ;; `vanilla' is default Emacs mode-line. `custom' is a user defined themes,
   ;; refer to the DOCUMENTATION.org for more info on how to create your own
   ;; spaceline theme. Value can be a symbol or list with additional properties.
   ;; (default '(spacemacs :separator wave :separator-scale 1.5))
   dotspacemacs-mode-line-theme '(spacemacs :separator wave :separator-scale 1.5)

   ;; Default font or prioritized list of fonts.
   dotspacemacs-default-font '("Fira Code"
                               ;;"Fira Code Medium"
                               :size 15
                               :weight normal
                               :width normal
                               ::powerline-scale 1.1)

   ;; The leader key (default "SPC")
   dotspacemacs-leader-key "SPC"

   ;; The key used for Emacs commands `M-x' (after pressing on the leader key).
   ;; (default "SPC")
   dotspacemacs-emacs-command-key "SPC"

   ;; The leader key accessible in `emacs state' and `insert state'
   ;; (default "M-m")
   dotspacemacs-emacs-leader-key "M-m"


   ;; If non-nil, the paste transient-state is enabled. While enabled, after you
   ;; paste something, pressing `C-j' and `C-k' several times cycles through the
   ;; elements in the `kill-ring'. (default nil)
   dotspacemacs-enable-paste-transient-state nil

   ;; Which-key frame position. Possible values are `right', `bottom' and
   ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
   ;; right; if there is insufficient space it displays it at the bottom.
   ;; (default 'bottom)
   dotspacemacs-which-key-position 'right-then-bottom

   ;; Control where `switch-to-buffer' displays the buffer. If nil,
   ;; `switch-to-buffer' displays the buffer in the current window even if
   ;; another same-purpose window is available. If non-nil, `switch-to-buffer'
   ;; displays the buffer in a same-purpose window even if the buffer can be
   ;; displayed in the current window. (default nil)
   dotspacemacs-switch-to-buffer-prefers-purpose nil

   ;; If non-nil the frame is undecorated when Emacs starts up. Combine this
   ;; variable with `dotspacemacs-maximized-at-startup' in OSX to obtain
   ;; borderless fullscreen. (default nil)
   dotspacemacs-undecorated-at-startup t

   ;; Delete whitespace while saving buffer. Possible values are `all'
   ;; to aggressively delete empty line and long sequences of whitespace,
   ;; `trailing' to delete only the whitespace at end of lines, `changed' to
   ;; delete only whitespace for changed lines or `nil' to disable cleanup.
   ;; (default nil)
   dotspacemacs-whitespace-cleanup 'changed
   ))

(defun dotspacemacs/user-init ()
  "Initialization for user code:
This function is called immediately after `dotspacemacs/init', before layer
configuration.
It is mostly for variables that should be set before packages are loaded.
If you are unsure, try setting them in `dotspacemacs/user-config' first."
  (setq exec-path-from-shell-arguments '("-l"))
  )

(defun dotspacemacs/user-config ()
  "Configuration for user code:
This function is called at the very end of Spacemacs startup, after layer
configuration.
Put your configuration code here, except for variables that should be set
before packages are loaded."

  ;; no symlinks question prompted
  (setq vc-follow-symlinks t)

  ;; indente switch case
  (c-set-offset 'case-label '+)
  ;; tab size is 4
  (setq  c-basic-offser 4)
  ;; da ?
  (setq indent-tabs-mod nil)

  ;; Select windows arrow
  (global-set-key (kbd "C-c <up>") 'windmove-up)
  (global-set-key (kbd "C-c <down>") 'windmove-down)
  (global-set-key (kbd "C-c <left>") 'windmove-left)
  (global-set-key (kbd "C-c <right>") 'windmove-right)
  (global-set-key (kbd "<f6>") 'compile)

  ;; src: https://emacs.stackexchange.com/questions/31761/how-to-use-a-separate-window-for-compilation-output
  ;; Always open compilation buffers in the same window.
  (add-to-list 'display-buffer-alist
               (cons (lambda (buffer alist)
                       (with-current-buffer buffer
                         (eq major-mode 'compilation-mode)))
                     (cons 'display-buffer-reuse-major-mode-window
                           '((inhibit-same-window . nil)
                             (reusable-frames . visible)
                             (inhibit-switch-frame . nil)))))

  (defun display-buffer-reuse-major-mode-window (buffer alist)
    "Return a window displaying a buffer in BUFFER's major mode.
Return nil if no usable window is found.

If ALIST has a non-nil `inhibit-same-window' entry, the selected
window is not eligible for reuse.

If ALIST contains a `reusable-frames' entry, its value determines
which frames to search for a reusable window:
  nil -- the selected frame (actually the last non-minibuffer frame)
  A frame   -- just that frame
  `visible' -- all visible frames
  0   -- all frames on the current terminal
  t   -- all frames.

If ALIST contains no `reusable-frames' entry, search just the
selected frame if `display-buffer-reuse-frames' and
`pop-up-frames' are both nil; search all frames on the current
terminal if either of those variables is non-nil.

If ALIST has a non-nil `inhibit-switch-frame' entry, then in the
event that a window on another frame is chosen, avoid raising
that frame."
    (let* ((alist-entry (assq 'reusable-frames alist))
           (frames (cond (alist-entry (cdr alist-entry))
                         ((if (eq pop-up-frames 'graphic-only)
                              (display-graphic-p)
                            pop-up-frames)
                          0)
                         (display-buffer-reuse-frames 0)
                         (t (last-nonminibuffer-frame))))
           (window (let ((mode (with-current-buffer buffer major-mode)))
                     (if (and (eq mode (with-current-buffer (window-buffer)
                                         major-mode))
                              (not (cdr (assq 'inhibit-same-window alist))))
                         (selected-window)
                       (catch 'window
                         (walk-windows
                          (lambda (w)
                            (and (window-live-p w)
                                 (eq mode (with-current-buffer (window-buffer w)
                                            major-mode))
                                 (not (eq w (selected-window)))
                                 (throw 'window w)))
                          'nomini frames))))))
      (when (window-live-p window)
        (prog1 (window--display-buffer buffer window 'reuse alist)
          (unless (cdr (assq 'inhibit-switch-frame alist))
            (window--maybe-raise-frame (window-frame window)))))))

  ;; shortcut bs-show
  (global-set-key (kbd "C-x <down>") 'bs-show)

  ;; shell/zsh
  (setq
   explicit-shell-file-name "/bin/zsh"
   shell-file-name "/bin/zsh"
   multi-term-program "/bin/zsh"
   ;; load zsh alias
   shell-command-switch "-ic")
  (add-hook 'term-mode-hook #'eterm-256color-mode)


  ;; enable ansi color in term & compilation & git?
  (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on) ; enable ansi on shell mode
  (ansi-color-for-comint-mode-on)                                          ; ansi for git
  (add-to-list 'comint-output-filter-functions 'ansi-color-process-output) ; follow

  ;; clean spaces before save
  ;; (add-hook 'before-save-hook 'whitespace-cleanup)         ; remove extra space per lines
  ;; (add-hook 'before-save-hook 'delete-trailing-whitespace) ; remove all extra space


                                        ; Text takes up 85% of the buffer
  (setq olivetti-body-width 0.85)
                                        ; Starts text files (like .org .txt .md) in olivetti mode
  (add-hook 'text-mode-hook 'olivetti-mode)
                                        ; stop lockfile
  (setq create-lockfiles nil)

                                        ; git
  (setq magit-repository-directories '("~/repos/")) ; root repo
  (global-git-commit-mode t)                        ; enable speed git mode

  ;; conf mode line
  (setq display-time-24hr-format t)
  (setq display-time-format "%H:%M:%S")        ; add seconds
  (setq display-time-interval 1)               ; update every second
  (setq display-time-default-load-average nil) ; don't show load average
  (setq display-time-mail-string "")           ; don't show mail
  (display-time-mode 1)                        ; show time in mode line on startup
  (spacemacs/toggle-mode-line-battery-on)      ; display battery info
  (global-visual-line-mode 1)                  ; wrap line by default
  (spacemacs/toggle-highlight-long-lines-globally-on) ; highlight line over 80 col

  ;; font
  ;; src: https://github.com/tonsky/FiraCode/wiki/Emacs-instructions
  ;; https://github.com/syl20bnr/spacemacs/issues/6972#issuecomment-695902234

  (use-package composite
    :defer t
    :init
    (defvar composition-ligature-table (make-char-table nil))
    :hook
    (((prog-mode conf-mode nxml-mode markdown-mode help-mode)
      . (lambda () (setq-local composition-function-table composition-ligature-table))))
    :config
    ;; support ligatures, some toned down to prevent hang
    (when (version<= "27.0" emacs-version)
      (let ((alist
             '((33 . ".\\(?:\\(==\\|[!=]\\)[!=]?\\)")
               (35 . ".\\(?:\\(###?\\|_(\\|[(:=?[_{]\\)[#(:=?[_{]?\\)")
               (36 . ".\\(?:\\(>\\)>?\\)")
               (37 . ".\\(?:\\(%\\)%?\\)")
               (38 . ".\\(?:\\(&\\)&?\\)")
               (42 . ".\\(?:\\(\\*\\*\\|[*>]\\)[*>]?\\)")
               ;; (42 . ".\\(?:\\(\\*\\*\\|[*/>]\\).?\\)")
               (43 . ".\\(?:\\([>]\\)>?\\)")
               ;; (43 . ".\\(?:\\(\\+\\+\\|[+>]\\).?\\)")
               (45 . ".\\(?:\\(-[->]\\|<<\\|>>\\|[-<>|~]\\)[-<>|~]?\\)")
               ;; (46 . ".\\(?:\\(\\.[.<]\\|[-.=]\\)[-.<=]?\\)")
               (46 . ".\\(?:\\(\\.<\\|[-=]\\)[-<=]?\\)")
               (47 . ".\\(?:\\(//\\|==\\|[=>]\\)[/=>]?\\)")
               ;; (47 . ".\\(?:\\(//\\|==\\|[*/=>]\\).?\\)")
               (48 . ".\\(?:\\(x[a-fA-F0-9]\\).?\\)")
               (58 . ".\\(?:\\(::\\|[:<=>]\\)[:<=>]?\\)")
               (59 . ".\\(?:\\(;\\);?\\)")
               (60 . ".\\(?:\\(!--\\|\\$>\\|\\*>\\|\\+>\\|-[-<>|]\\|/>\\|<[-<=]\\|=[<>|]\\|==>?\\||>\\||||?\\|~[>~]\\|[$*+/:<=>|~-]\\)[$*+/:<=>|~-]?\\)")
               (61 . ".\\(?:\\(!=\\|/=\\|:=\\|<<\\|=[=>]\\|>>\\|[=>]\\)[=<>]?\\)")
               (62 . ".\\(?:\\(->\\|=>\\|>[-=>]\\|[-:=>]\\)[-:=>]?\\)")
               (63 . ".\\(?:\\([.:=?]\\)[.:=?]?\\)")
               (91 . ".\\(?:\\(|\\)[]|]?\\)")
               ;; (92 . ".\\(?:\\([\\n]\\)[\\]?\\)")
               (94 . ".\\(?:\\(=\\)=?\\)")
               (95 . ".\\(?:\\(|_\\|[_]\\)_?\\)")
               (119 . ".\\(?:\\(ww\\)w?\\)")
               (123 . ".\\(?:\\(|\\)[|}]?\\)")
               (124 . ".\\(?:\\(->\\|=>\\||[-=>]\\||||*>\\|[]=>|}-]\\).?\\)")
               (126 . ".\\(?:\\(~>\\|[-=>@~]\\)[-=>@~]?\\)"))))
        (dolist (char-regexp alist)
          (set-char-table-range composition-ligature-table (car char-regexp)
                                `([,(cdr char-regexp) 0 font-shape-gstring]))))
      (set-char-table-parent composition-ligature-table composition-function-table))
    )




  ;; ;; disable for helm
  ;; (add-hook 'helm-major-mode-hook
  ;;         (lambda ()
  ;;           (setq auto-composition-mode nil)))



  ;; (setq global-wakatime-mode t)
  ;; (with-eval-after-load 'wakatime-mode
  ;;   (custom-set-variables '(wakatime-api-key "12cc0e7d-58ce-458f-bb54-c74e607956e3"))
  ;; )

  ;; (eval-after-load 'flycheck
  ;;   '(add-hook 'flycheck-mode-hook #'flycheck-golangci-lint-setup))

  (setq projectile-globally-ignored-file-suffixes '("vendor"))


  ;; org
  (with-eval-after-load "org"

    ;; color font and stuffs: https://zzamboni.org/post/beautifying-org-mode-in-emacs/
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; https://out-of-cheese-error.netlify.app/spacemacs-config
    (setq
     ;; https://www.reddit.com/r/spacemacs/comments/hakh9c/changing_org_bullet_list/
     org-superstar-headline-bullets-list '("◉" "○" "▲" "▶" "■" "◆")

     org-agenda-files (apply 'append
		                         (mapcar
		                          (lambda (directory)
		  	                        (directory-files-recursively
		  	                       directory org-agenda-file-regexp))
		                          '(
                                ;; "~/repo/sbc/"
                                ;; "~/repo/docker/"
                                "~/repo/webfmwk/"
                                ;; "~/repo/golib/"
                                "~/repo/licensetool/"
                                ;; "~/repo/gommon/"
                                "~/repo/TODOs/"
                                ;; "~/repo/perso/unix_conf/"
                                ;; "~/repo/perso/sosound-tools/"
                                )))

     ;;org-agenda-files (directory-files-recursively "~/repo/sbc/" "\.org$")
     ;; org-agenda-files (list "~/repo/TODOs/TODOs.org")

                                        ; custom keyword // | mean closed for left
     org-todo-keywords
     '((sequence "IDEA" "TODO" "WIP" "REVIEW" "|" "UNASIGNED" "CANCELED" "DONE"))
                                        ; keyword colors
     org-todo-keyword-faces
     '(("IDEA" . "SlateGray")
       ("TODO" . "SlateGray")
       ("WIP" . "DarkOrchid")
       ("REVIEW" . "ForestGreen")
       ("UNASIGNED" . "Firebrick")
       ("CANCELED" . "Firebrick")
       ("DONE" . "Teal"))

                                        ; enable speed commands
     org-use-speed-commands t
                                        ; log time on done
     org-log-done 'time
                                        ; org clock ..?
     spaceline-org-clock-p t
                                        ; shift + arrow to select
     org-support-shift-select t


                                        ; Skip finished items
     org-agenda-skip-deadline-if-done t
     org-agenda-skip-scheduled-if-donee t
     org-agenda-skip-timestamp-if-done t
                                        ; Skip deleted file
     org-agenda-skip-unavailable-files t

                                        ; ailignn text under headings
     org-startup-indented t
     org-pretty-entities t
                                        ; show actually italicized text instead of /italicized text/
     ;; org-hide-emphasis-markers t
     org-agenda-block-separator " "
     org-fontify-whole-heading-line t
     org-fontify-done-headline t
     org-fontify-quote-and-verse-blocks t
     )
    ;; end setq
                                        ; pretty org check box
    (add-hook 'org-mode-hook (lambda ()
                               "Beautify Org Checkbox Symbol"
                               (push '("[ ]" . "☐" ) prettify-symbols-alist)
                               (push '("[X]" . "☑" ) prettify-symbols-alist)
                               (push '("[-]" . "❍" ) prettify-symbols-alist)
                               (prettify-symbols-mode)))
    (defface org-checkbox-done-text
      '((t (:foreground "#71696A")))
      "Face for the text part of a checked org-mode checkbox.")
    )
  ;; end eval-after-load org

  ;; auto load TODO's project
  ;; (with-eval-after-load 'org-agenda
  ;;   (require 'org-projectile)
  ;;   (mapcar #'(lambda (file)
  ;;              (when (file-exists-p file)
  ;;                (push file org-agenda-files)))
  ;;           (org-projectile-todo-files)))

  (with-eval-after-load "helm"
    ;; fix long helm search
    ;; https://github.com/emacs-helm/helm/issues/1976
    (setq x-wait-for-event-timeout nil)
    )

  ;; helm fix ret to enter dir
  ;; https://emacs.stackexchange.com/questions/3798/how-do-i-make-pressing-ret-in-helm-find-files-open-the-directory
  (with-eval-after-load 'helm-files
    (defun fu/helm-find-files-navigate-forward (orig-fun &rest args)
      (if (and (equal "Find Files" (assoc-default 'name (helm-get-current-source)))
               (equal args nil)
               (stringp (helm-get-selection))
               (not (file-directory-p (helm-get-selection))))
          (helm-maybe-exit-minibuffer)
        (apply orig-fun args)))
    (advice-add 'helm-execute-persistent-action :around #'fu/helm-find-files-navigate-forward)
    (define-key helm-find-files-map (kbd "<return>") 'helm-execute-persistent-action)

    (defun fu/helm-find-files-navigate-back (orig-fun &rest args)
      (if (= (length helm-pattern) (length (helm-find-files-initial-input)))
          (helm-find-files-up-one-level 1)
        (apply orig-fun args)))
    (advice-add 'helm-ff-delete-char-backward :around #'fu/helm-find-files-navigate-back)
    )
  )



;; Do not write anything past this comment. This is where Emacs will
;; auto-generate custom variable definitions.
(defun dotspacemacs/emacs-custom-settings ()
  "Emacs custom settings.
This is an auto-generated function, do not modify its content directly, use
Emacs customize menu instead.
This function is called at the very end of Spacemacs initialization."
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(evil-want-Y-yank-to-eol nil)
 '(hl-todo-keyword-faces
   '(("TODO" . "#dc752f")
     ("NEXT" . "#dc752f")
     ("THEM" . "#2d9574")
     ("PROG" . "#3a81c3")
     ("OKAY" . "#3a81c3")
     ("DONT" . "#f2241f")
     ("FAIL" . "#f2241f")
     ("DONE" . "#42ae2c")
     ("NOTE" . "#b1951d")
     ("KLUDGE" . "#b1951d")
     ("HACK" . "#b1951d")
     ("TEMP" . "#b1951d")
     ("FIXME" . "#dc752f")
     ("XXX+" . "#dc752f")
     ("\\?\\?\\?+" . "#dc752f")))
 '(package-selected-packages
   '(posframe unicode-fonts ucs-utils font-utils persistent-soft pcache fira-code-mode oldlace-theme ample-theme lsp-python-ms helm-lsp helm-ctest dap-mode lsp-treemacs bui cquery company-lsp cmake-mode cmake-ide levenshtein ccls lsp-mode systemd anaconda-mode pythonic wgrep smex ivy-yasnippet ivy-xref ivy-rtags ivy-rich ivy-purpose ivy-hydra flyspell-correct-ivy counsel-projectile helm-gtags ggtags counsel-gtags counsel swiper company-lua lua-mode yasnippet-snippets yaml-mode xterm-color vterm vmd-mode treemacs-magit terminal-here smeargle shell-pop ranger ox-gfm orgit org-ref pdf-tools key-chord ivy org-re-reveal org-projectile org-category-capture org-present org-pomodoro alert log4e gntp org-mime org-download org-cliplink org-brain org-ql peg ov org-super-agenda dash-functional ts nginx-mode multi-term mmm-mode markdown-toc markdown-mode magit-svn magit-gitflow magit-popup insert-shebang htmlize helm-rtags helm-org-rifle helm-org helm-gitignore helm-git-grep helm-company helm-c-yasnippet helm-bibtex parsebib google-c-style godoctor go-tag go-rename go-impl go-guru go-gen-test go-fill-struct go-eldoc gnuplot gitignore-templates gitignore-mode gitconfig-mode gitattributes-mode git-timemachine git-messenger git-link git-gutter-fringe+ fringe-helper git-gutter+ gh-md fuzzy flyspell-popup flyspell-correct-helm flyspell-correct flycheck-ycmd flycheck-rtags flycheck-pos-tip flycheck-golangci-lint flycheck-bashate fish-mode evil-org evil-magit magit git-commit with-editor eshell-z eshell-prompt-extras esh-help emojify emoji-cheat-sheet-plus dockerfile-mode docker transient tablist json-mode docker-tramp json-snatcher json-reformat disaster cpp-auto-include company-ycmd ycmd request-deferred deferred company-statistics company-shell company-rtags rtags company-quickhelp pos-tip company-go go-mode company-emoji company-c-headers company clang-format browse-at-remote biblio biblio-core auto-yasnippet yasnippet auto-dictionary ac-ispell auto-complete ws-butler writeroom-mode winum which-key volatile-highlights vi-tilde-fringe uuidgen use-package treemacs-projectile toc-org symon symbol-overlay string-inflection spaceline-all-the-icons restart-emacs request rainbow-delimiters popwin persp-mode pcre2el password-generator paradox overseer org-plus-contrib org-bullets open-junk-file nameless move-text macrostep lorem-ipsum link-hint indent-guide hybrid-mode hungry-delete hl-todo highlight-parentheses highlight-numbers highlight-indentation helm-xref helm-themes helm-swoop helm-purpose helm-projectile helm-mode-manager helm-make helm-ls-git helm-flx helm-descbinds helm-ag google-translate golden-ratio font-lock+ flycheck-package flycheck-elsa flx-ido fill-column-indicator fancy-battery eyebrowse expand-region evil-visualstar evil-visual-mark-mode evil-unimpaired evil-tutor evil-textobj-line evil-surround evil-numbers evil-nerd-commenter evil-mc evil-matchit evil-lisp-state evil-lion evil-indent-plus evil-iedit-state evil-goggles evil-exchange evil-escape evil-ediff evil-cleverparens evil-args evil-anzu eval-sexp-fu elisp-slime-nav editorconfig dumb-jump dotenv-mode doom-modeline diminish devdocs define-word column-enforce-mode clean-aindent-mode centered-cursor-mode auto-highlight-symbol auto-compile aggressive-indent ace-link ace-jump-helm-line))
 '(pdf-view-midnight-colors '("#655370" . "#fbf8ef")))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
)
